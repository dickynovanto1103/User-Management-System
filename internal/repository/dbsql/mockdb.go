// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/dbsql/db.go

// Package dbsql is a generated GoMock package.
package dbsql

import (
	model "github.com/dickynovanto1103/User-Management-System/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDB is a mock of DB interface
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// GetUser mocks base method
func (m *MockDB) GetUser(username string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", username)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockDBMockRecorder) GetUser(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockDB)(nil).GetUser), username)
}

// UpdateNickname mocks base method
func (m *MockDB) UpdateNickname(nickname, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNickname", nickname, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNickname indicates an expected call of UpdateNickname
func (mr *MockDBMockRecorder) UpdateNickname(nickname, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNickname", reflect.TypeOf((*MockDB)(nil).UpdateNickname), nickname, username)
}

// UpdateProfile mocks base method
func (m *MockDB) UpdateProfile(profile, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", profile, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile
func (mr *MockDBMockRecorder) UpdateProfile(profile, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockDB)(nil).UpdateProfile), profile, username)
}

// GetPassword mocks base method
func (m *MockDB) GetPassword(username string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassword", username)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPassword indicates an expected call of GetPassword
func (mr *MockDBMockRecorder) GetPassword(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassword", reflect.TypeOf((*MockDB)(nil).GetPassword), username)
}
